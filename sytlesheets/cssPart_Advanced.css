/* verschiedene Selektoren */

/*h2 - Tag mit der Id 'first-article' soll blau gefärbt werden */
h2#first-article {
    color: blue;
    font-size: 40px;
}


h2 {
    color: red;
}

#first-article {
    color:chartreuse;
}

/*Spezifität wird mehr gewichtet als die Kaskadierung */

/* Überschreiben die Font-Color auf violet (war vorher blau)
h2#first-article {
    color:violet;
}

/* und-Kombinator */
/*Selektiert alle aufgezählten Elemente*/
/*
li, p {
    color: orange;
}
*/

/* Nachfage/Descendat-Selektor */
nav li {
    list-style-type: none;
}

/* Direkter-Nachfahr/Child-Selector */

li>a {
    text-decoration: none;
    color:aqua;
}


* Direct-Sibling-Selecotr */
/* Selektiert nur p Elemente, die direkt nach dem h2 kommend und auf der selben Ebene stehen */
/* Erstes <p>-Tag nach <h2> (muss auf selber Ebene sein), wird rot gefärbt */
h2+p {
    color: burlywood
}

/*General Sibling Selector */
/* Selektiert alle Elemente die auf der selben Stufe stehen wie das erstgenannte Element */
h2 ~ p {
    color: blue;
}

/* Attributs-Selektor: */

a[href="#"] {
    color:tomato;
}

/* Können genau angeben wie das Attribut heißen soll */
/* Können die werte recht flexibel abfangen */

/* 
    element[attributsName="Wert"] => Attribut mit genauem Wert
    element[attributsName^="Wert"] => Attributswert muss mit Wert beginnen
    element[attributsName$="Wert"] => Attributswert muss mit  Wert enden
    element[attributsName*="Wert"] => Attributswert muss Wert enthalten
    element:not([attributsname="Wert"]) => Elementsattribut darf den Wert nicht enthalten
*/

/* *[class*="container"] {
    display: block;
    height: 150px;
    background-color: brown;
} */

/* Spezifität: 
    (id, klasse, element)
    (höchste Prio, mittlere Prio, niedrigste Prio)
*/



/* Pseudoelemente */

/* Werden an einem anderen Selektor gehängt */
/* Beinnen mit dem ::PseudoElementName */

/*
    ::after - Fügt etwas als letztes Child eines Elementes an
    ::before - Fügt etwas als erstes Child eines Elementes an
*/


li>a::before {
    content: "Ich bin before ";
}

li>a::after {
    content: " Ich bin after";
}


/* 
    ::first-letter - Stylt den ersten Buchstaben eines Textes
    ::first-line - Stylt die erste Zeile eines Absatzes
*/

/*Rule kann einkommentiert werden. Das Ergebnis ist grafisch nicht ansprechend */
/*
h2#first-article::first-letter {
    font-size: 48px;
}

h2+p::first-line {
    background-color: aquamarine;
}
*/

/* ::placeholder - Stylt den Platzhalter eines Elementes */
#input1::placeholder {
    color:blueviolet;
}

/* Bestimmt wie die Aufzählungszeichen bei li-Elementen aussehen */
article li::marker {
    content: "[ ]";
}


/* Pseudoklassen */
/* :root - Root-Element innerhalb unseres Dokumentes */
/* Ist spezifischer als html */

:root {
    font-size: large;
}

/* :hover - Wird angewandt wenn man mit der Maus über ein Element fährt */

li>a:hover {
    color:pink;
}

/* :not() */
/* Erfasst Elemente die nicht ausgeschlossen wurden innerhalb der Klammer */

/* n-th-Child */
/* 
    :first-child => Erfässt das erste Kindselement
    :last-child => Erfässt das letzte Kindselement
    :only-child => Erfässt das einzige Element
    :nth-child(n+m) => Erfässt das n-te Kind eines Elements und beginnt bei m zu zählen
    :nth-last-child(n+m) => Erfässt das n-te Kind eines Elements und beginnt bei m zu zählen in umgekehrter Reihenfolge
    Statt n+m kann auch even oder odd enthalten sein
*/

li:first-child {
    color:chartreuse;
}

li:last-child {
    color: chartreuse;
}

li:first-child:hover {
    color:blue;
}

/* :only-child {
    background-color: yellow;
} */

/* li:nth-child(even) {
    background-color: blueviolet;
}

li:nth-child(odd) {
    background-color: orange;
} */

/* li:nth-last-child(even) {
    background-color: blueviolet;
}
li:nth-last-child(odd) {
    background-color: orange;
} */

li:nth-child(1n+4) {
    background-color: orange;
}


/* 
    :first-of-type => Stylt das erste Element dieses Typens
    :last-of-type => Stylt das letzte Element dieses Typens
    :only-of-type => Stylt das einzige Element dieses Typens
    :nth-of-type(n+m) => Stylt jedes n-te Element dieses Typens beginnend bei m
    :nth-last-of-type(n+m) Stylt jedes n-te Element dieses Typens beginnend bei m, beginnt von hinten zu zählen
*/


/* 
    Bei Input-Elementen
    :valid
    :invalid 
    Stylen das Element je nachdem ob es gerade gültig ist oder ungültig
*/

/* 
    ! Nach Pause Übung
*/

/* Media-Query Einstieg */
/* Syntax: */
/* @media <geräte-typ> and(beide Bedingungen müssen erfüllt sein) <Bedingung (z.B. min-width:) */
/* @media <geräte-typ>, <Bedingung> */
/* Geräte-Typen */
/* all - Alle Geräte */
/* print - Drucker */
/* screen - jegliche Bildschirme */
/* Weitere nützliche Bedingung: */
/* orientation: */
/* portrait : Hochformat */
/* landscape : Querformat */

/* Breakpoints: */
/* Punkte an denen die Regeln geändert werden */












